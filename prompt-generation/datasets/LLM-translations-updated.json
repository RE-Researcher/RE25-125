{
    "X a => X c": "In summary, X a => X c requires that if a is true in the next state, then c must also be true in that same next state. If a is not true in the next state, the formula imposes no constraints on c. The formula's constraints are limited to the transition from the current state to the next state and do not extend beyond that.",
    "X b => !X d": "In summary, the formula X b => !X d imposes a constraint only on the immediate next state, ensuring that if b is true, d must not be true in that same state. This constraint is evaluated and resolved in the next state, with no ongoing implications for future states beyond that point.\n\n",
    "a & X b": "In summary, the formula a & X b requires a to be true right now and b to be true in the next state. Once these conditions are checked, the formula imposes no further constraints on future states.\n\n",
    "b | !X a": "In summary, the formula b ∨ ¬ X a is satisfied if either b is true in the current state or a is false in the next state. The constraint on a applies only to the immediate next state and does not extend beyond that.\n\n",
    "X a & b": "In the current state, b must be true, and in the very next state, a must be true. The formula does not impose any constraints beyond the next state, nor does it require b to be true in the next state or a to remain true beyond the next state.",
    "X !b & d": "In summary, X !b & d requires that in the very next state, b must be false and d must be true. This constraint applies only to the next state and does not affect the current state or any subsequent states beyond the next one.\n",
    "a U c": "In summary, the formula a U c requires that c eventually becomes true, and until that happens, a must be true. Once c is true, the constraints on a are lifted, and the formula is considered satisfied.\n\n",
    "b U !d": "The formula b U ¬ d is evaluated at a given moment in time. It requires that at some point in the future, ¬ d (meaning \"d is false\") must become true. Until ¬ d becomes true, b must be true in every state from the current state up to, but not including, the state where ¬ d first holds.\n\n",
    "(c & b) U a": "In summary, the formula (c ∧ b) U a requires that a eventually becomes true, and until that happens, both c and b must be true. Once a is true, the constraints on c and b are lifted.\n\n",
    "(d | !b) U !a": "In summary, the formula (d ∨ ¬ b) U ¬ a requires that ¬ a must eventually be true, and until that happens, either d must be true or b must be false. Once ¬ a is true, the constraints on d and b are lifted.\n\n",
    "a U (b & c)": "In summary, the formula a U (b ∧ c) imposes a requirement that b ∧ c must eventually be true, and until that happens, a must remain true. Once b ∧ c is satisfied, the constraints on a are lifted.\n\n",
    "b U (a | d)": "In summary, the formula b U (a ∨ d) requires that either a or d must eventually become true, and until that happens, b must be true in every state. Once a ∨ d is true, the requirement on b ceases.\n\n",
    "(c U a) & (b U a)": "Either a or d must eventually become true. Until that happens, b must be true in every state. Once either a or  d becomes true, b no longer needs to hold.\n",
    "(d U c) | (a U !c)": "This formula imposes constraints based on the satisfaction of either of its components. It requires either c to eventually be true with d holding until then, or !c to eventually be true with a holding until then. Once one of these conditions is met, the constraints on the respective variables are lifted.",
    "G a": "The condition a must be true in every state of the execution, starting from the current state and continuing indefinitely into the future. If at any state a becomes false, the formula is violated. Therefore, a imposes a continuous and unending constraint on the system, requiring its truth at all times.",
    "F !b": "The formula F !b requires that there must be at least one future state where b is false. It does not impose any immediate constraints on the current state or the next state but requires that b eventually becomes false at some point in the future. Once a state is reached where b is false, the formula is satisfied, and no further constraints are imposed. The formula is violated if b remains true in all future states.",
    "!G c": "There must be at least one state in the execution where c is false. This means that c cannot be true in every state. The formula is satisfied if at least one state is found where c is false, and it is violated if c is true in every state of the execution. The constraint is ongoing until a state is found where c is false, at which point the formula is satisfied.\n\n",
    "!F (a & b)": "There must not exist any future state where both a and b are true simultaneously. This imposes a constraint over the entire execution of the system, ensuring that a & b is false in every state. The formula is satisfied if a and b are never true at the same time in any state, and it is violated if there is at least one state where both are true.\n\n",
    "F (!y & w)": "The formula F (!y & w) requires that there must be at least one future state where y is false and w is true simultaneously. It does not impose any constraints on the current state or on the states leading up to the satisfaction of the condition. The formula is satisfied once such a state is found, and it does not impose any further constraints after that point. If no such state exists in the future, the formula is violated.\n\n",
    "G t | F w": "The formula G t ∨ F w can be translated into natural language as follows: \"Either t must be true in every state of the execution, or there must exist at least one future state where w is true. If t is true globally, the formula is satisfied\n\n",
    "X (t & y)": "\"In the very next state, both t and y must be true.\" This formula imposes a constraint only on the immediate next state following the current one. It does not impose any constraints on the current state or any states beyond the next one. The formula is satisfied if both t and y are true in the next state and violated if either is false.",
    "!X !(w | x)": "\"In the next state, at least one of w or x must be true.\" This formula imposes a constraint only on the immediate next state after it is evaluated, requiring that either w or x (or both) be true in that state. There are no further constraints beyond this next state.",
    "t => w": "Whenever t is true, w must also be true in the same state. If t is false, the formula is satisfied regardless of the truth value of w. The formula imposes constraints only in states where t is true, requiring w to be true in those states. There are no ongoing constraints beyond the immediate evaluation of each state",
    "t => (x & y)": "If t is true at any given moment, then both x and y must also be true at that same moment. If t is false, there are no constraints on x and y.\" This formula is concerned solely with the immediate truth values of t, x, and y, and does not impose any temporal constraints beyond the current state",
    "!X t": "In the very next state, t must be false.\" This imposes a constraint only on the immediate next state following the current one. Once the next state is evaluated, and t is confirmed to be false, the formula is satisfied, and no further constraints are imposed on t in subsequent states. If t is true in the next state, the formula is violated.",
    "X t => X y": "If t is true in the very next state, then y must also be true in that next state.\" This formula imposes a constraint only on the immediate next state following the current one, and it is satisfied unless t is true and y is false in that next state.",
    "X (t | w)": "In the very next state, either t or w must be true.\" This formula imposes a constraint only on the next state, requiring that at least one of the conditions t or w holds true. Once the next state is evaluated, the formula's constraints cease, and it does not affect any subsequent states.",
    "X (y => x & w)": "In the very next state, if y is true, then both x and w must also be true. If y is false in the next state, there are no constraints on x and w.\" This formula is concerned only with the immediate next state and does not impose any constraints beyond that point.",
    "F x | F y": "There must exist at least one future state where either x is true or y is true. The formula is satisfied if at least one of these conditions is met at some point in the future. Until then, the system is constrained to eventually satisfy one of these conditions. Once either x or y becomes true, the formula is satisfied, and no further constraints apply.",
    "X a & !G b": "In the very next state, a must be true, and there must be at least one state in the future where b is false.\" The constraint on a is immediate and applies only to the next state, while the constraint on b is ongoing until a state is found where b is false.",
    "d & X (c U a)": "Currently, d must be true. In the very next state, a must eventually become true, and until that happens, c must remain true in every state. Once a becomes true, c no longer needs to hold. If d is false now, or if a never becomes true while c is continuously true, the formula is violated.",
    "(b | !a) & X (d U c)": "In the current state, either b must be true or a must be false. In the very next state, c must eventually become true, and until it does, d must remain true. Once c is true, there are no further constraints on d.",
    "(b U c) & (d U !b)": "c must eventually become true, and until it does, b must be true in every state. Simultaneously, !b must eventually become true, and until it does, d must be true in every state, The constraints on b and d are lifted once c and !b become true, respectively.The formula is satisfied if both conditions are met in any order, and it is violated if either is violated before their respective conditions are satisfied.",
    "G (!f | !i)": "In every state of the system's execution, it must be the case that either `f` is false, `i` is false, or both are false. The system must never reach a state where both `f` and `i` are true simultaneously. This constraint applies globally and continuously throughout the entire execution of the system.\"",
    "F (f => j)": "Eventually, there must be a state in the future where if  f is true, then j must also be true. Until such a state is reached, there are no constraints on f and j. The formula is satisfied if there is at least one future state where the implication holds, and it is violated if no such state exists",
    "G (j => !f)": "In every state of the system's execution, if j is true, then f must be false. This constraint applies globally, meaning it must hold at every state throughout the entire execution. If there is any state where \\( j \\) is true and \\( f \\) is also true, the formula is violated. If \\( j \\) is false, the formula does not impose any constraint on \\( f \\) in that state.",
    "G (!i) | F (f U i)": "Either i must always be false throughout the execution, or there must be a future point where i becomes true, with f  being true in every state leading up to that point. If i is always false, the formula is satisfied without further constraints on f . If i eventually becomes true, f must be true until that moment, after which no further constraints are imposed by this formula.\"",
    "(a U b) & (c U d)": "Both b and d must eventually become true. Until b is true, a must remain true, and until d is true, c must remain true. Once b and d are true, the constraints on a and c no longer apply. The formula is satisfied if these conditions are met, and violated if they are not.",
    "b U (d & a)": "At some point in the future, both d and a must be true simultaneously. Until that moment, b must be true in every state. Once (d & a) is true, there are no further constraints on b.",
    "F (o | u)": "There must exist at least one future state where either o is true or u is true, or both are true. The formula does not impose any constraints on the current state or on any states before this condition is met. Once a state is reached where (o | u) holds, the formula is satisfied, and no further constraints apply",
    "G (n => s)": "In every state of the execution, if n is true, then s must also be true.\" The formula imposes a constraint only when n is true, requiring s to be true at the same time. This constraint applies globally, meaning it must hold in every state throughout the execution. If there is any state where n is true and s is false, the formula is violated. If n is false, there are no constraints on s for that state",
    "(y & !d) | (y => d)": "This formula is satisfied if, in the current state, either y is true and d is false, or if whenever y is true, d is also true. It does not impose any constraints on future states, as it lacks temporal operators. The formula is violated if y is true and d is true, or if y is true and d is false, failing both conditions.",
    "X (f & i)": "In the very next state, both f  and i must be true.\" This formula imposes a constraint only on the next state following the current one. It does not impose any constraints on the current state or any states beyond the next one. The formula is satisfied if both f  and i are true in the next state and violated if either is false.",
    "X(!g | !j)": "The formula X(!g | !j) requires that in the next state, at least one of g or j must be false. It does not impose constraints on the current state, nor does it enforce any conditions beyond the next state. The formula is satisfied if in the next state either g or j is false (or both). It is violated if, in the next state, both g and j are true.",
    "X (!i) | X (j)": "In the very next state, either `i` must be false, or `j` must be true. This formula imposes a constraint only on the immediate next state, requiring that at least one of these conditions is met. Once the next state is evaluated, the formula no longer imposes any constraints on subsequent states.",
    "F d | G !n": "Either there must be at least one future state where d is true, or n must be false in every state of the execution. The formula is satisfied if either condition holds, and it is violated if n is ever true or if d never becomes true in any future state",
    "a U (c & d)": "The condition (c &d) must eventually become true. Until that happens, a  must be true in every state. If(c &d) is true at the initial evaluation, then a is not constrained. Once (c &d) becomes true, the requirement for a to be true is lifted.",
    "b & X (a U c)": "Currently, b must be true. In the very next state, a must hold continuously until c becomes true at some point in the future. Once c is true, the requirement for a to hold is lifted.",
    "X !(t | w)": " The LTL formula `X !(t | w)` requires that in the very next state, neither `t` nor `w` can be true. This constraint applies only to the next state and does not affect any states beyond that. The formula is satisfied if both `t` and `w` are false in the next state and violated if either is true.",
    "F (o U u)": "There must be a future point where u  becomes true. Until that point, o must be true in every state. Once u is true, there are no further constraints on o or u.\" This means that the system must eventually reach a state where u is true, and until then, o must consistently hold."
}